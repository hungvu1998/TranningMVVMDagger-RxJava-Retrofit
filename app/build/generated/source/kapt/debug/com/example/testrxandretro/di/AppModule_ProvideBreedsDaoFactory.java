// Generated by Dagger (https://google.github.io/dagger).
package com.example.testrxandretro.di;

import com.example.testrxandretro.data.sources.local.BreedsDao;
import com.example.testrxandretro.data.sources.local.Database;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideBreedsDaoFactory implements Factory<BreedsDao> {
  private final AppModule module;

  private final Provider<Database> databaseProvider;

  public AppModule_ProvideBreedsDaoFactory(AppModule module, Provider<Database> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public BreedsDao get() {
    return provideInstance(module, databaseProvider);
  }

  public static BreedsDao provideInstance(AppModule module, Provider<Database> databaseProvider) {
    return proxyProvideBreedsDao(module, databaseProvider.get());
  }

  public static AppModule_ProvideBreedsDaoFactory create(
      AppModule module, Provider<Database> databaseProvider) {
    return new AppModule_ProvideBreedsDaoFactory(module, databaseProvider);
  }

  public static BreedsDao proxyProvideBreedsDao(AppModule instance, Database database) {
    return Preconditions.checkNotNull(
        instance.provideBreedsDao(database),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
