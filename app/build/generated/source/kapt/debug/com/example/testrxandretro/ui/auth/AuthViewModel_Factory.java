// Generated by Dagger (https://google.github.io/dagger).
package com.example.testrxandretro.ui.auth;

import com.example.testrxandretro.network.auth.AuthApi;
import com.example.testrxandretro.viewmodels.SessionManager;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class AuthViewModel_Factory implements Factory<AuthViewModel> {
  private final Provider<AuthApi> authApiProvider;

  private final Provider<SessionManager> sessionManagerProvider;

  public AuthViewModel_Factory(
      Provider<AuthApi> authApiProvider, Provider<SessionManager> sessionManagerProvider) {
    this.authApiProvider = authApiProvider;
    this.sessionManagerProvider = sessionManagerProvider;
  }

  @Override
  public AuthViewModel get() {
    return provideInstance(authApiProvider, sessionManagerProvider);
  }

  public static AuthViewModel provideInstance(
      Provider<AuthApi> authApiProvider, Provider<SessionManager> sessionManagerProvider) {
    return new AuthViewModel(authApiProvider.get(), sessionManagerProvider.get());
  }

  public static AuthViewModel_Factory create(
      Provider<AuthApi> authApiProvider, Provider<SessionManager> sessionManagerProvider) {
    return new AuthViewModel_Factory(authApiProvider, sessionManagerProvider);
  }

  public static AuthViewModel newAuthViewModel(AuthApi authApi, SessionManager sessionManager) {
    return new AuthViewModel(authApi, sessionManager);
  }
}
