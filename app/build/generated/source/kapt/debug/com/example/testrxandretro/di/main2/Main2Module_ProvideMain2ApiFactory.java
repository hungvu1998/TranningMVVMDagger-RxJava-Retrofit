// Generated by Dagger (https://google.github.io/dagger).
package com.example.testrxandretro.di.main2;

import com.example.testrxandretro.network.main2.Main2Api;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class Main2Module_ProvideMain2ApiFactory implements Factory<Main2Api> {
  private final Main2Module module;

  private final Provider<Retrofit> retrofitProvider;

  public Main2Module_ProvideMain2ApiFactory(
      Main2Module module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public Main2Api get() {
    return provideInstance(module, retrofitProvider);
  }

  public static Main2Api provideInstance(Main2Module module, Provider<Retrofit> retrofitProvider) {
    return proxyProvideMain2Api(module, retrofitProvider.get());
  }

  public static Main2Module_ProvideMain2ApiFactory create(
      Main2Module module, Provider<Retrofit> retrofitProvider) {
    return new Main2Module_ProvideMain2ApiFactory(module, retrofitProvider);
  }

  public static Main2Api proxyProvideMain2Api(Main2Module instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideMain2Api(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
