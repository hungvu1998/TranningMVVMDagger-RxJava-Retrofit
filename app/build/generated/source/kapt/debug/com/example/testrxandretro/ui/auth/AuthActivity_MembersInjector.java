// Generated by Dagger (https://google.github.io/dagger).
package com.example.testrxandretro.ui.auth;

import android.graphics.drawable.Drawable;
import androidx.fragment.app.Fragment;
import com.bumptech.glide.RequestManager;
import com.example.testrxandretro.viewmodels.ViewModelProvidersFactory;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import javax.inject.Provider;

public final class AuthActivity_MembersInjector implements MembersInjector<AuthActivity> {
  private final Provider<DispatchingAndroidInjector<Fragment>> supportFragmentInjectorProvider;

  private final Provider<DispatchingAndroidInjector<android.app.Fragment>>
      frameworkFragmentInjectorProvider;

  private final Provider<String> xxvxProvider;

  private final Provider<Drawable> logoProvider;

  private final Provider<RequestManager> requestManagerProvider;

  private final Provider<ViewModelProvidersFactory> providerFactoryProvider;

  public AuthActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Fragment>> supportFragmentInjectorProvider,
      Provider<DispatchingAndroidInjector<android.app.Fragment>> frameworkFragmentInjectorProvider,
      Provider<String> xxvxProvider,
      Provider<Drawable> logoProvider,
      Provider<RequestManager> requestManagerProvider,
      Provider<ViewModelProvidersFactory> providerFactoryProvider) {
    this.supportFragmentInjectorProvider = supportFragmentInjectorProvider;
    this.frameworkFragmentInjectorProvider = frameworkFragmentInjectorProvider;
    this.xxvxProvider = xxvxProvider;
    this.logoProvider = logoProvider;
    this.requestManagerProvider = requestManagerProvider;
    this.providerFactoryProvider = providerFactoryProvider;
  }

  public static MembersInjector<AuthActivity> create(
      Provider<DispatchingAndroidInjector<Fragment>> supportFragmentInjectorProvider,
      Provider<DispatchingAndroidInjector<android.app.Fragment>> frameworkFragmentInjectorProvider,
      Provider<String> xxvxProvider,
      Provider<Drawable> logoProvider,
      Provider<RequestManager> requestManagerProvider,
      Provider<ViewModelProvidersFactory> providerFactoryProvider) {
    return new AuthActivity_MembersInjector(
        supportFragmentInjectorProvider,
        frameworkFragmentInjectorProvider,
        xxvxProvider,
        logoProvider,
        requestManagerProvider,
        providerFactoryProvider);
  }

  @Override
  public void injectMembers(AuthActivity instance) {
    DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
        instance, supportFragmentInjectorProvider.get());
    DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
        instance, frameworkFragmentInjectorProvider.get());
    injectXxvx(instance, xxvxProvider.get());
    injectLogo(instance, logoProvider.get());
    injectRequestManager(instance, requestManagerProvider.get());
    injectProviderFactory(instance, providerFactoryProvider.get());
  }

  public static void injectXxvx(AuthActivity instance, String xxvx) {
    instance.xxvx = xxvx;
  }

  public static void injectLogo(AuthActivity instance, Drawable logo) {
    instance.logo = logo;
  }

  public static void injectRequestManager(AuthActivity instance, RequestManager requestManager) {
    instance.requestManager = requestManager;
  }

  public static void injectProviderFactory(
      AuthActivity instance, ViewModelProvidersFactory providerFactory) {
    instance.providerFactory = providerFactory;
  }
}
