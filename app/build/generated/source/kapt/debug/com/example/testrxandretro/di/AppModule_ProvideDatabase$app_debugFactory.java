// Generated by Dagger (https://google.github.io/dagger).
package com.example.testrxandretro.di;

import android.app.Application;
import com.example.testrxandretro.data.sources.local.Database;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideDatabase$app_debugFactory implements Factory<Database> {
  private final AppModule module;

  private final Provider<Application> applicationProvider;

  public AppModule_ProvideDatabase$app_debugFactory(
      AppModule module, Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public Database get() {
    return provideInstance(module, applicationProvider);
  }

  public static Database provideInstance(
      AppModule module, Provider<Application> applicationProvider) {
    return proxyProvideDatabase$app_debug(module, applicationProvider.get());
  }

  public static AppModule_ProvideDatabase$app_debugFactory create(
      AppModule module, Provider<Application> applicationProvider) {
    return new AppModule_ProvideDatabase$app_debugFactory(module, applicationProvider);
  }

  public static Database proxyProvideDatabase$app_debug(
      AppModule instance, Application application) {
    return Preconditions.checkNotNull(
        instance.provideDatabase$app_debug(application),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
